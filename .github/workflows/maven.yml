name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Build Project
        run: |
          cd lootbox-service
          mvn clean install -DskipTests

      - name: Run Unit Tests with H2
        run: |
          cd lootbox-service
          mvn test -Dspring.datasource.url=jdbc:h2:mem:testdb \
                   -Dspring.datasource.driver-class-name=org.h2.Driver \
                   -Dspring.datasource.username=sa \
                   -Dspring.datasource.password= \
                   -Dspring.sql.init.mode=never

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: lootbox-service/target/surefire-reports/
          retention-days: 7

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarQube Scan
        run: |
          cd lootbox-service
          mvn verify sonar:sonar \
            -Dsonar.projectKey=Bobba9882_Lootbox_Service \
            -Dsonar.organization=bobba9882 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, sonar-analysis]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/lootbox-service:latest ./lootbox-service

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/lootbox-service:latest'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lootbox-service:latest
